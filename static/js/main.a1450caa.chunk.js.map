{"version":3,"sources":["dataset.ts","Navigation.tsx","HomePage.tsx","EntitiesPage.tsx","EntityPage.tsx","ScrollToTop.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Transaction","row","date","account","amount","person","entity","comment","split","map","Number","day","month","year","this","Date","getDate","getMonth","getFullYear","i","toString","padStart","join","Entity","transactions","name","people","notes","Array","from","Set","t","lastTransaction","now","Account","reduce","sum","Note","note","formattedDate","about","message","fetchRawRecords","Promise","resolve","sheets","gsapi","GSAPI","clientId","spreadsheet","Object","values","user","signIn","fn","getAll","args","all","s","then","dataArr","result","keys","acc","key","index","groupTransactionsByKey","transactionsByKey","keyValue","push","parseRawRecords","rawRecords","shift","notesByKey","n","sort","a","b","getTime","accounts","entities","e","setNotes","cachedRawRecords","window","localStorage","getItem","defaultDataset","JSON","parse","DatasetContext","React","createContext","loadDataset","console","error","setItem","stringify","Navigation","pathname","useLocation","className","src","process","width","height","alt","label","href","m","to","HomePage","useContext","total","toFixed","EntitiesPage","views","useState","activeView","setActiveView","changeView","preventDefault","target","innerText","sortedEntities","getMonthsOverdue","v","onClick","getLastPerson","EntityPage","props","match","params","find","length","getFormattedDate","ScrollToTop","useEffect","scrollTo","App","dataset","setDataset","basename","appName","Provider","value","exact","path","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a1450caa.chunk.js","sourcesContent":["import React from 'react'\nimport GSAPI from 'google-sheets-api'\n\nclass Transaction {\n\t[key: string]: any\n\tdate: Date\n\taccount: string\n\tamount: number\n\tperson: string\n\tentity: string\n\tcomment: string\n\t// @TODO: hash an id for use in loop keys\n\n\tconstructor(row: string[]) {\n\t\tconst [day, month, year] = row[0].split('.').map(Number);\n\t\tthis.date = new Date(year, month - 1, day) // months are 0-based\n\t\tthis.account = row[3]\n\t\tthis.amount = Number(row[4])\n\t\tthis.person = row[2]\n\t\tthis.entity = row[1]\n\t\tthis.comment = row[5]\n\t}\n\n\t// @TODO: simplify\n\tgetFormattedDate(): string {\n\t\treturn [\n\t\t\tthis.date.getDate(),\n\t\t\tthis.date.getMonth() + 1, // months are 0-based\n\t\t\tthis.date.getFullYear()\n\t\t]\n\t\t\t.map(i => i.toString().padStart(2, '0'))\n\t\t\t.join('.');\n\t}\n}\n\nclass Entity {\n\tname: string\n\ttransactions: Transaction[]\n\tpeople: string[]\n\tnotes: Note[]\n\n\tconstructor(transactions: Transaction[]) {\n\t\tthis.name = transactions[0].entity;\n\t\tthis.transactions = transactions;\n\t\tthis.people = Array.from(new Set(transactions.map(t => t.person)));\n\t\tthis.notes = [] // @TODO: as second argument\n\t}\n\n\tgetLastPerson(): string {\n\t\treturn this.transactions[0].person;\n\t}\n\n\tgetMonthsOverdue(): number {\n\t\tconst lastTransaction = this.transactions[0];\n\t\tconst now = new Date();\n\t\tconst yearsAgo = now.getFullYear() - lastTransaction.date.getFullYear();\n\t\tconst monthsAgo = now.getMonth() - lastTransaction.date.getMonth();\n\t\treturn yearsAgo * 12 + monthsAgo;\n\t}\n\n\t// @TODO: as second constructor argument\n\tsetNotes(notes: Note[]): Entity {\n\t\tif (notes) this.notes = notes\n\t\treturn this\n\t}\n}\n\nclass Account {\n\tname: string\n\ttransactions: Transaction[]\n\tamount: number\n\n\tconstructor(transactions: Transaction[]) {\n\t\tthis.name = transactions[0].account;\n\t\tthis.transactions = transactions;\n\t\tthis.amount = transactions.reduce((sum, t) => sum + t.amount, 0);\n\t}\n}\n\nclass Note {\n\tdate: Date\n\tformattedDate: string\n\tabout: string\n\tmessage: string\n\n\tconstructor(note: string[]) {\n\t\tconst [day, month, year] = note[0].split('.').map(Number);\n\t\tthis.date = new Date(year, month - 1, day) // months are 0-based\n\t\tthis.formattedDate = note[0]\n\t\tthis.about = note[1]\n\t\tthis.message = note[2]\n\t}\n}\n\ninterface Dataset {\n\ttransactions: Transaction[]\n\taccounts: Account[]\n\tentities: Entity[]\n}\n\ninterface RawRecords {\n\ttransactions: string[][]\n\tnotes: string[][]\n}\n\nconst promisify = (fn: Function) => (...args: any) => new Promise(resolve => fn(...args, resolve))\n\nconst fetchRawRecords = (): Promise<RawRecords> => new Promise(resolve => {\n\tconst sheets = {\n\t\ttransactions: 'Движения',\n\t\tnotes: 'Бележки'\n\t}\n\tconst gsapi = GSAPI({\n\t\tclientId: '780267795399-048pa12qtdcpdganklc6ggmpbm3epucv.apps.googleusercontent.com',\n\t\tspreadsheet: { name: 'База данни ЕС', sheets: Object.values(sheets) }\n\t}, () => {\n\t\tgsapi.user.signIn(() => {\n\t\t\tconst getAll = promisify(gsapi.getAll)\n\t\t\tPromise.all(Object.values(sheets).map(s => getAll(s)))\n\t\t\t\t.then((dataArr) => {\n\t\t\t\t\tconst result = Object.keys(sheets)\n\t\t\t\t\t\t.reduce((acc, key, index) => ({ ...acc, [key]: dataArr[index] }), {})\n\t\t\t\t\tresolve(result as RawRecords)\n\t\t\t\t})\n\t\t})\n\t})\n})\n\nfunction groupTransactionsByKey(transactions: Transaction[], key: string): Transaction[][] {\n\tconst transactionsByKey = transactions.reduce((all: any, t) => {\n\t\tconst keyValue = t[key];\n\t\tall[keyValue] = all[keyValue] || [];\n\t\tall[keyValue].push(t);\n\t\treturn all;\n\t}, {})\n\treturn Object.values(transactionsByKey)\n}\n\nfunction parseRawRecords(rawRecords: RawRecords): Dataset {\n\t// skip header rows\n\trawRecords.transactions.shift()\n\trawRecords.notes.shift()\n\n\tconst notesByKey = rawRecords.notes.map(n => new Note(n))\n\t\t.reduce((all: any, n) => {\n\t\t\tall[n.about] = all[n.about] || [];\n\t\t\tall[n.about].push(n)\n\t\t\treturn all\n\t\t}, {})\n\tconst transactions = rawRecords.transactions.map(t => new Transaction(t))\n\t\t.sort((a, b) => b.date.getTime() - a.date.getTime())\n\tconst accounts = groupTransactionsByKey(transactions, 'account')\n\t\t.map(t => new Account(t))\n\tconst entities = groupTransactionsByKey(transactions, 'entity')\n\t\t.map(t => new Entity(t))\n\t\t.map(e => e.setNotes(notesByKey[e.name]))\n\t\t.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0)\n\treturn { transactions, accounts, entities }\n}\n\nconst cachedRawRecords = window.localStorage.getItem('rawRecords')\n\nexport const defaultDataset: Dataset = cachedRawRecords\n\t? parseRawRecords(JSON.parse(cachedRawRecords))\n\t: { transactions: [], accounts: [], entities: [] }\n\nexport const DatasetContext = React.createContext(defaultDataset)\n\nexport const loadDataset = async () => {\n\tconst rawRecords = await fetchRawRecords()\n\tif (!rawRecords.transactions) {\n\t\tconsole.error('Could not fetch any transactions!')\n\t\treturn defaultDataset\n\t}\n\twindow.localStorage.setItem('rawRecords', JSON.stringify(rawRecords))\n\treturn parseRawRecords(rawRecords)\n}\n","import React from 'react'\nimport { Link, useLocation } from \"react-router-dom\";\n\nexport default function Navigation() {\n\tconst { pathname } = useLocation()\n\tconst menuItems = [\n\t\t{ label: 'Баланси', href: '/' },\n\t\t{ label: 'Обекти', href: '/entities' }\n\t]\n\treturn (\n\t\t<nav className='navbar navbar-expand sticky-top navbar-dark bg-dark'>\n\t\t\t<div className='container'>\n\t\t\t\t<span className=\"navbar-brand\">\n\t\t\t\t\t<img src={process.env.PUBLIC_URL + '/apple-touch-icon.png'}\n\t\t\t\t\t\twidth=\"30\"\n\t\t\t\t\t\theight=\"30\"\n\t\t\t\t\t\talt=\"Domus logo\" />\n\t\t\t\t</span>\n\t\t\t\t<div className='navbar-nav mr-auto'>\n\t\t\t\t\t{menuItems.map(m => (\n\t\t\t\t\t\t<Link key={m.href} to={m.href}\n\t\t\t\t\t\t\tclassName={`nav-item nav-link ${pathname === m.href ? 'active' : ''}`}>\n\t\t\t\t\t\t\t{m.label}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</nav>\n\t)\n}\n","import React from 'react'\nimport { DatasetContext } from './dataset'\n\nexport default function HomePage() {\n\tconst { accounts } = React.useContext(DatasetContext)\n\tconst total = accounts.reduce((total, account) => total + account.amount, 0)\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"mt-n3 mx-n3 mb-3 p-3 bg-secondary text-light\">\n\t\t\t\t<h2>Баланси и сметки</h2>\n\t\t\t</div>\n\n\t\t\t<ul className='list-group'>\n\t\t\t\t<li className='list-group-item list-group-item-secondary d-flex justify-content-between'>\n\t\t\t\t\tОбщ баланс\n\t\t\t\t\t<strong>{total.toFixed(2)}лв</strong>\n\t\t\t\t</li>\n\t\t\t\t{accounts.map(({ name, amount }) => (\n\t\t\t\t\t<li key={name} className='list-group-item d-flex justify-content-between'>\n\t\t\t\t\t\t{name}\n\t\t\t\t\t\t<strong>{amount.toFixed(2)}лв</strong>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n","import React from 'react'\nimport { DatasetContext } from './dataset'\nimport { Link } from 'react-router-dom'\n\nexport default function EntitiesPage() {\n\tconst { entities } = React.useContext(DatasetContext)\n\tconst views = ['Азбучно', 'Длъжници'];\n\tconst [activeView, setActiveView] = React.useState(views[0]);\n\tconst changeView = (e: any) => {\n\t\te.preventDefault();\n\t\tsetActiveView(e.target.innerText);\n\t};\n\n\tconst sortedEntities = activeView === views[0]\n\t\t? entities\n\t\t: [...entities].sort((a, b) => b.getMonthsOverdue() - a.getMonthsOverdue())\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"mt-n3 mx-n3 mb-3 px-3 pt-3 bg-secondary text-light\">\n\t\t\t\t<h2>Обекти</h2>\n\t\t\t\t<ul className='nav nav-tabs border-0'>\n\t\t\t\t\t{views.map(v => (\n\t\t\t\t\t\t<li key={v} className='nav-item'>\n\t\t\t\t\t\t\t<a className={`nav-link ${activeView === v ? 'active' : ''}`}\n\t\t\t\t\t\t\t\tonClick={changeView}>\n\t\t\t\t\t\t\t\t{v}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className='list-group'>\n\t\t\t\t{sortedEntities.map(e => (\n\t\t\t\t\t<Link key={e.name} to={`/entity/${e.name}`} className='list-group-item list-group-item-action'>\n\t\t\t\t\t\t<div className='d-flex justify-content-between align-items-center'>\n\t\t\t\t\t\t\t<h5 className='mb-0'>{e.name}</h5>\n\t\t\t\t\t\t\t<span className='badge badge-warning badge-pill'>\n\t\t\t\t\t\t\t\t{e.getMonthsOverdue()} месеца\n                </span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<small className='text-muted'>\n\t\t\t\t\t\t\t{e.getLastPerson()}\n\t\t\t\t\t\t</small>\n\n\t\t\t\t\t</Link>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React from 'react'\nimport { DatasetContext } from './dataset'\n\nexport default function EntityPage(props: any) {\n\tconst { entities } = React.useContext(DatasetContext)\n\tconst { name } = props.match.params;\n\tconst entity = entities.find(e => e.name === name);\n\tconst views = ['Движения', 'Хора'];\n\tconst [activeView, setActiveView] = React.useState(views[0]);\n\tconst changeView = (e: any) => {\n\t\te.preventDefault();\n\t\tsetActiveView(e.target.innerText);\n\t};\n\n\tif (!entity) return <h2>Not found</h2>;\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"mt-n3 mx-n3 mb-3 px-3 pt-3 bg-secondary text-light\">\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<ul className='nav nav-tabs border-0'>\n\t\t\t\t\t{views.map(v => (\n\t\t\t\t\t\t<li key={v} className='nav-item'>\n\t\t\t\t\t\t\t<a className={`nav-link ${activeView === v ? 'active' : ''}`}\n\t\t\t\t\t\t\t\tonClick={changeView}>\n\t\t\t\t\t\t\t\t{v}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t{entity.notes.length > 0 && (\n\t\t\t\t<div className='list-group mb-3'>\n\t\t\t\t\t{entity.notes.map(note => (\n\t\t\t\t\t\t<div key={note.date.getTime()} className='list-group-item list-group-item-warning'>\n\t\t\t\t\t\t\t<small className='mr-2'>{note.formattedDate}</small>\n\t\t\t\t\t\t\t{note.message}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{activeView === views[1] && (\n\t\t\t\t<div className='list-group'>\n\t\t\t\t\t{entity.people.map(person => (\n\t\t\t\t\t\t<div key={person} className='list-group-item list-group-item-action'>\n\t\t\t\t\t\t\t{person}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{activeView === views[0] && (\n\t\t\t\t<div className='list-group'>\n\t\t\t\t\t{entity.transactions.map(t => (\n\t\t\t\t\t\t<div key={t.date + t.comment + t.amount} className='list-group-item'>\n\t\t\t\t\t\t\t<small className='d-flex justify-content-between align-items-center'>\n\t\t\t\t\t\t\t\t<div>{t.getFormattedDate()}</div>\n\t\t\t\t\t\t\t\t<div>{t.person}</div>\n\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t\t<span className='badge badge-secondary mr-2'>\n\t\t\t\t\t\t\t\t{t.amount}лв\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t{t.comment}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ScrollToTop() {\n\tconst { pathname } = useLocation();\n\n\tuseEffect(() => {\n\t\twindow.scrollTo(0, 0);\n\t}, [pathname]);\n\n\treturn null;\n}\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\nimport { name as appName } from '../package.json'\nimport { DatasetContext, loadDataset, defaultDataset } from './dataset'\nimport Navigation from './Navigation'\nimport HomePage from './HomePage'\nimport EntitiesPage from './EntitiesPage'\nimport EntityPage from './EntityPage'\nimport ScrollToTop from './ScrollToTop'\n\nexport default function App() {\n\tconst [dataset, setDataset] = React.useState(defaultDataset)\n\tReact.useEffect(() => {\n\t\tloadDataset().then(setDataset)\n\t}, [])\n\n\treturn (\n\t\t<BrowserRouter basename={appName}>\n\t\t\t<DatasetContext.Provider value={dataset}>\n\t\t\t\t<ScrollToTop />\n\t\t\t\t<Navigation />\n\t\t\t\t<div className='container py-3'>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path='/' component={HomePage} />\n\t\t\t\t\t\t<Route exact path='/entities' component={EntitiesPage} />\n\t\t\t\t\t\t<Route exact path='/entity/:name' component={EntityPage} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</DatasetContext.Provider>\n\t\t</BrowserRouter>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}