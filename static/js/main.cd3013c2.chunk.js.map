{"version":3,"sources":["components/Navigation.tsx","store/googleSheets.ts","store/index.ts","components/StoreProvider.tsx","components/HomePage.tsx","components/EntitiesPage.tsx","components/NotesList.tsx","components/EntityPage.tsx","components/ScrollToTop.jsx","components/RedirectOnLoad.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","pathname","useLocation","className","src","process","width","height","alt","label","href","map","m","key","to","_api","blankSpreadsheet","transactions","notes","sheetNames","cache","window","localStorage","storeInCache","data","setItem","JSON","stringify","readFromCache","serializedData","getItem","parse","promisify","fn","args","Promise","resolve","getAPI","newAPI","GSAPI","clientId","spreadsheet","name","sheets","Object","values","insert","getAll","user","signIn","fetchAllData","a","api","all","s","resultList","rows","keys","reduce","acc","index","insertRow","sheet","then","push","Transaction","row","date","formattedDate","account","amount","person","entity","comment","split","Number","day","month","year","this","Date","Entity","people","Array","from","Set","t","lastTransaction","now","getFullYear","getMonth","Account","sum","Note","note","about","message","groupTransactionsByKey","transactionsByKey","keyValue","parseSpreadsheet","shift","sort","b","getTime","accounts","entities","n","initialContent","ContentContext","React","createContext","useStore","useContext","StoreProvider","props","useState","state","setState","useEffect","Provider","value","newContent","dateString","getDate","join","unshift","insertContent","children","HomePage","total","toFixed","EntitiesPage","views","activeView","setActiveView","changeView","e","preventDefault","target","innerText","sortedEntities","getMonthsOverdue","v","onClick","getLastPerson","NotesList","filteredNotes","filter","newMessage","setNewMessage","onSubmit","onChange","EntityPage","match","params","find","ScrollToTop","scrollTo","RedirectOnLoad","useHistory","location","replace","redirectTo","URLSearchParams","search","get","basename","pop","App","appName","exact","path","component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cd3013c2.chunk.js","sourcesContent":["import React from 'react'\nimport { Link, useLocation } from \"react-router-dom\";\n\nexport default function Navigation() {\n\tconst { pathname } = useLocation()\n\tconst menuItems = [\n\t\t{ label: 'Баланси', href: '/' },\n\t\t{ label: 'Обекти', href: '/entities' }\n\t]\n\treturn (\n\t\t<nav className='navbar navbar-expand sticky-top navbar-dark bg-dark'>\n\t\t\t<div className='container'>\n\t\t\t\t<span className=\"navbar-brand\">\n\t\t\t\t\t<img src={process.env.PUBLIC_URL + '/apple-touch-icon.png'}\n\t\t\t\t\t\twidth=\"30\"\n\t\t\t\t\t\theight=\"30\"\n\t\t\t\t\t\talt=\"Domus logo\" />\n\t\t\t\t</span>\n\t\t\t\t<div className='navbar-nav mr-auto'>\n\t\t\t\t\t{menuItems.map(m => (\n\t\t\t\t\t\t<Link key={m.href} to={m.href}\n\t\t\t\t\t\t\tclassName={`nav-item nav-link ${pathname === m.href ? 'active' : ''}`}>\n\t\t\t\t\t\t\t{m.label}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</nav>\n\t)\n}\n","import GSAPI from 'google-sheets-api'\n\ninterface GoogleSheetsAPI {\n\tinsert: Function\n\tgetAll: Function\n\tuser: {\n\t\tsignIn: Function\n\t}\n}\n\nexport interface SpreadsheetData {\n\t[key: string]: string[][]\n\ttransactions: string[][]\n\tnotes: string[][]\n}\n\nconst blankSpreadsheet: SpreadsheetData = {\n\ttransactions: [],\n\tnotes: []\n}\n\nconst sheetNames: any = {\n\ttransactions: 'Движения',\n\tnotes: 'Бележки'\n}\n\nconst cache = window.localStorage\nconst cacheKey = 'spreadsheet-data'\n\nconst storeInCache = (data: SpreadsheetData) => {\n\tcache.setItem(cacheKey, JSON.stringify(data))\n}\n\nconst readFromCache = (): SpreadsheetData => {\n\tconst serializedData = cache.getItem(cacheKey)\n\treturn serializedData ? JSON.parse(serializedData) : blankSpreadsheet\n}\n\nconst promisify = (fn: Function) => (...args: any) => new Promise(resolve => fn(...args, resolve))\n\nlet _api: GoogleSheetsAPI\nconst getAPI = (): Promise<GoogleSheetsAPI> => new Promise(resolve => {\n\tif (_api) return resolve(_api)\n\tconst newAPI = GSAPI({\n\t\tclientId: '780267795399-048pa12qtdcpdganklc6ggmpbm3epucv.apps.googleusercontent.com',\n\t\tspreadsheet: { name: 'База данни ЕС', sheets: Object.values(sheetNames) }\n\t}, () => {\n\t\t_api = newAPI\n\t\t_api.insert = promisify(_api.insert)\n\t\t_api.getAll = promisify(_api.getAll)\n\t\t_api.user.signIn = promisify(_api.user.signIn)\n\t\tresolve(_api)\n\t})\n})\n\nexport const getCachedData = () => readFromCache()\n\nexport const fetchAllData = async () => {\n\tconst api = await getAPI()\n\n\tconst isSignedIn = await api.user.signIn()\n\tif (!isSignedIn) return blankSpreadsheet\n\n\tconst resultList = await Promise.all(Object.values(sheetNames).map(s => api.getAll(s)))\n\tconst rows = Object.keys(sheetNames)\n\t\t.reduce((acc, key, index) => ({ ...acc, [key]: resultList[index] }), {}) as SpreadsheetData\n\tstoreInCache(rows)\n\treturn rows\n}\n\nexport const insertRow = async (sheet: string, data: string[]) => {\n\tgetAPI().then(api => api.insert(sheetNames[sheet], data))\n\tconst rows = readFromCache()\n\trows[sheet].push(data)\n\tstoreInCache(rows)\n\treturn rows\n}\n","import { SpreadsheetData, getCachedData, fetchAllData, insertRow } from './googleSheets'\n\nclass Transaction {\n\t[key: string]: any\n\tdate: Date\n\tformattedDate: string\n\taccount: string\n\tamount: number\n\tperson: string\n\tentity: string\n\tcomment: string\n\t// @TODO: hash an id for use in loop keys\n\n\tconstructor(row: string[]) {\n\t\tconst [day, month, year] = row[0].split('.').map(Number);\n\t\tthis.date = new Date(year, month - 1, day) // months are 0-based\n\t\tthis.formattedDate = row[0]\n\t\tthis.account = row[3]\n\t\tthis.amount = Number(row[4])\n\t\tthis.person = row[2]\n\t\tthis.entity = row[1]\n\t\tthis.comment = row[5]\n\t}\n}\n\nclass Entity {\n\tname: string\n\ttransactions: Transaction[]\n\tpeople: string[]\n\n\tconstructor(transactions: Transaction[]) {\n\t\tthis.name = transactions[0].entity;\n\t\tthis.transactions = transactions;\n\t\tthis.people = Array.from(new Set(transactions.map(t => t.person)));\n\t}\n\n\tgetLastPerson(): string {\n\t\treturn this.transactions[0].person;\n\t}\n\n\tgetMonthsOverdue(): number {\n\t\tconst lastTransaction = this.transactions[0];\n\t\tconst now = new Date();\n\t\tconst yearsAgo = now.getFullYear() - lastTransaction.date.getFullYear();\n\t\tconst monthsAgo = now.getMonth() - lastTransaction.date.getMonth();\n\t\treturn yearsAgo * 12 + monthsAgo;\n\t}\n}\n\nclass Account {\n\tname: string\n\ttransactions: Transaction[]\n\tamount: number\n\n\tconstructor(transactions: Transaction[]) {\n\t\tthis.name = transactions[0].account;\n\t\tthis.transactions = transactions;\n\t\tthis.amount = transactions.reduce((sum, t) => sum + t.amount, 0);\n\t}\n}\n\nclass Note {\n\tdate: Date\n\tformattedDate: string\n\tabout: string\n\tmessage: string\n\n\tconstructor(note: string[]) {\n\t\tconst [day, month, year] = note[0].split('.').map(Number);\n\t\tthis.date = new Date(year, month - 1, day) // months are 0-based\n\t\tthis.formattedDate = note[0]\n\t\tthis.about = note[1]\n\t\tthis.message = note[2]\n\t}\n}\n\ninterface Content {\n\ttransactions: Transaction[]\n\taccounts: Account[]\n\tentities: Entity[]\n\tnotes: Note[]\n\tinsert: Function\n}\n\nfunction groupTransactionsByKey(transactions: Transaction[], key: string): Transaction[][] {\n\tconst transactionsByKey = transactions.reduce((all: any, t) => {\n\t\tconst keyValue = t[key];\n\t\tall[keyValue] = all[keyValue] || [];\n\t\tall[keyValue].push(t);\n\t\treturn all;\n\t}, {})\n\treturn Object.values(transactionsByKey)\n}\n\nfunction parseSpreadsheet(data: SpreadsheetData): Content {\n\t// skip header rows\n\tdata.transactions.shift()\n\tdata.notes.shift()\n\n\tconst transactions = data.transactions.map(t => new Transaction(t))\n\t\t.sort((a, b) => b.date.getTime() - a.date.getTime())\n\n\tconst accounts = groupTransactionsByKey(transactions, 'account')\n\t\t.map(t => new Account(t))\n\n\tconst entities = groupTransactionsByKey(transactions, 'entity')\n\t\t.map(t => new Entity(t))\n\t\t.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0)\n\n\tconst notes = data.notes.map(n => new Note(n))\n\n\treturn { transactions, accounts, entities, notes, insert: () => { } }\n}\n\nexport const initialContent: Content = parseSpreadsheet(getCachedData())\n\nexport const fetchContent = () => fetchAllData().then(parseSpreadsheet)\n\nexport const insertContent = (newContent: string[]) => {\n\tconst now = new Date()\n\tconst dateString = [\n\t\tnow.getMonth() + 1, // months are 0-based\n\t\tnow.getDate(),\n\t\tnow.getFullYear()\n\t].join('/');\n\tnewContent.unshift(dateString)\n\t// @TODO: need to insert m/d/yyyy in google and dd.mm.yyyy in localstorage :(\n\treturn insertRow('notes', newContent).then(parseSpreadsheet)\n}\n","import React from 'react'\nimport { initialContent, fetchContent, insertContent } from '../store'\n\nconst ContentContext = React.createContext(initialContent)\n\nexport function useStore() {\n\treturn React.useContext(ContentContext)\n}\n\ninterface StoreProviderProps {\n\tchildren: React.ReactElement[]\n}\n\nexport default function StoreProvider(props: StoreProviderProps) {\n\tconst [state, setState] = React.useState(initialContent)\n\tReact.useEffect(() => {\n\t\tfetchContent().then(setState)\n\t}, [])\n\tconst insert = (data: any) => {\n\t\tinsertContent(data).then(setState)\n\t}\n\n\treturn (\n\t\t<ContentContext.Provider value={{ ...state, insert }}>\n\t\t\t{props.children}\n\t\t</ContentContext.Provider>\n\t)\n}\n","import React from 'react'\nimport { useStore } from './StoreProvider'\n\nexport default function HomePage() {\n\tconst { accounts } = useStore()\n\tconst total = accounts.reduce((total, account) => total + account.amount, 0)\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"mt-n3 mx-n3 mb-3 p-3 bg-secondary text-light\">\n\t\t\t\t<h2>Баланси и сметки</h2>\n\t\t\t</div>\n\n\t\t\t<ul className='list-group'>\n\t\t\t\t<li className='list-group-item list-group-item-secondary d-flex justify-content-between'>\n\t\t\t\t\tОбщ баланс\n\t\t\t\t\t<strong>{total.toFixed(2)}лв</strong>\n\t\t\t\t</li>\n\t\t\t\t{accounts.map(({ name, amount }) => (\n\t\t\t\t\t<li key={name} className='list-group-item d-flex justify-content-between'>\n\t\t\t\t\t\t{name}\n\t\t\t\t\t\t<strong>{amount.toFixed(2)}лв</strong>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n","import React from 'react'\nimport { useStore } from './StoreProvider'\nimport { Link } from 'react-router-dom'\n\nexport default function EntitiesPage() {\n\tconst { entities } = useStore()\n\tconst views = ['Азбучно', 'Длъжници'];\n\tconst [activeView, setActiveView] = React.useState(views[0]);\n\tconst changeView = (e: any) => {\n\t\te.preventDefault();\n\t\tsetActiveView(e.target.innerText);\n\t};\n\n\tconst sortedEntities = activeView === views[0]\n\t\t? entities\n\t\t: [...entities].sort((a, b) => b.getMonthsOverdue() - a.getMonthsOverdue())\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"mt-n3 mx-n3 mb-3 px-3 pt-3 bg-secondary text-light\">\n\t\t\t\t<h2>Обекти</h2>\n\t\t\t\t<ul className='nav nav-tabs border-0'>\n\t\t\t\t\t{views.map(v => (\n\t\t\t\t\t\t<li key={v} className='nav-item'>\n\t\t\t\t\t\t\t<a className={`nav-link ${activeView === v ? 'active' : ''}`}\n\t\t\t\t\t\t\t\tonClick={changeView}>\n\t\t\t\t\t\t\t\t{v}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className='list-group'>\n\t\t\t\t{sortedEntities.map(e => (\n\t\t\t\t\t<Link key={e.name} to={`/entity/${e.name}`} className='list-group-item list-group-item-action'>\n\t\t\t\t\t\t<div className='d-flex justify-content-between align-items-center'>\n\t\t\t\t\t\t\t<h5 className='mb-0'>{e.name}</h5>\n\t\t\t\t\t\t\t<span className='badge badge-warning badge-pill'>\n\t\t\t\t\t\t\t\t{e.getMonthsOverdue()} месеца\n                </span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<small className='text-muted'>\n\t\t\t\t\t\t\t{e.getLastPerson()}\n\t\t\t\t\t\t</small>\n\n\t\t\t\t\t</Link>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React from 'react'\nimport { useStore } from './StoreProvider'\n\ninterface NotesListProps {\n\tabout: string\n}\n\nexport default function NotesList(props: NotesListProps) {\n\tconst { notes, insert } = useStore()\n\tconst filteredNotes = notes.filter(n => n.about === props.about)\n\n\tconst [newMessage, setNewMessage] = React.useState('')\n\tconst changeNewMessage = (e: any) => setNewMessage(e.target.value)\n\tconst createNewNote = (e: any) => {\n\t\te.preventDefault()\n\t\tinsert([props.about, newMessage])\n\t\tsetNewMessage('')\n\t}\n\n\treturn (\n\t\t<div className='list-group mb-3'>\n\t\t\t<form className='list-group-item list-group-item-warning' onSubmit={createNewNote} >\n\t\t\t\t<span className='mr-2'>{'Бележки: '}</span>\n\t\t\t\t<input value={newMessage} onChange={changeNewMessage} />\n\t\t\t</form>\n\n\t\t\t{filteredNotes.map(note => (\n\t\t\t\t<div key={note.date.getTime()} className='list-group-item list-group-item-warning'>\n\t\t\t\t\t<small className='mr-2'>{note.formattedDate}</small>\n\t\t\t\t\t{note.message}\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport { useStore } from './StoreProvider'\nimport NotesList from './NotesList'\n\nexport default function EntityPage(props: any) {\n\tconst { entities } = useStore()\n\tconst { name } = props.match.params;\n\tconst entity = entities.find(e => e.name === name);\n\tconst views = ['Движения', 'Хора'];\n\tconst [activeView, setActiveView] = React.useState(views[0]);\n\tconst changeView = (e: any) => {\n\t\te.preventDefault();\n\t\tsetActiveView(e.target.innerText);\n\t};\n\n\tif (!entity) return <h2>Not found</h2>;\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"mt-n3 mx-n3 mb-3 px-3 pt-3 bg-secondary text-light\">\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<ul className='nav nav-tabs border-0'>\n\t\t\t\t\t{views.map(v => (\n\t\t\t\t\t\t<li key={v} className='nav-item'>\n\t\t\t\t\t\t\t<a className={`nav-link ${activeView === v ? 'active' : ''}`}\n\t\t\t\t\t\t\t\tonClick={changeView}>\n\t\t\t\t\t\t\t\t{v}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<NotesList about={name} />\n\n\t\t\t{activeView === views[1] && (\n\t\t\t\t<div className='list-group'>\n\t\t\t\t\t{entity.people.map(person => (\n\t\t\t\t\t\t<div key={person} className='list-group-item list-group-item-action'>\n\t\t\t\t\t\t\t{person}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{activeView === views[0] && (\n\t\t\t\t<div className='list-group'>\n\t\t\t\t\t{entity.transactions.map(t => (\n\t\t\t\t\t\t<div key={t.date + t.comment + t.amount} className='list-group-item'>\n\t\t\t\t\t\t\t<small className='d-flex justify-content-between align-items-center'>\n\t\t\t\t\t\t\t\t<div>{t.formattedDate}</div>\n\t\t\t\t\t\t\t\t<div>{t.person}</div>\n\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t\t<span className='badge badge-secondary mr-2'>\n\t\t\t\t\t\t\t\t{t.amount}лв\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t{t.comment}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ScrollToTop() {\n\tconst { pathname } = useLocation();\n\n\tuseEffect(() => {\n\t\twindow.scrollTo(0, 0);\n\t}, [pathname]);\n\n\treturn null;\n}\n","import React from 'react'\nimport { useHistory } from 'react-router-dom';\n\ninterface RedirectOnLoadProps {\n\tbasename: string\n}\n\nexport default function RedirectOnLoad(props: RedirectOnLoadProps) {\n\tconst { location, replace } = useHistory();\n\tconst searchParams = new URLSearchParams(location.search)\n\tconst redirectTo = searchParams.get('redirectTo')\n\n\tif (redirectTo) {\n\t\treplace(redirectTo.split(props.basename).pop() as string)\n\t}\n\n\treturn null\n}\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\"\nimport { name as appName } from '../../package.json'\nimport Navigation from './Navigation'\nimport HomePage from './HomePage'\nimport EntitiesPage from './EntitiesPage'\nimport EntityPage from './EntityPage'\nimport ScrollToTop from './ScrollToTop'\nimport StoreProvider from './StoreProvider'\nimport RedirectOnLoad from './RedirectOnLoad';\n\nexport default function App() {\n\treturn (\n\t\t<BrowserRouter basename={appName}>\n\t\t\t<ScrollToTop />\n\t\t\t<RedirectOnLoad basename={appName} />\n\t\t\t<StoreProvider>\n\t\t\t\t<Navigation />\n\t\t\t\t<div className='container py-3'>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path='/' component={HomePage} />\n\t\t\t\t\t\t<Route exact path='/entities' component={EntitiesPage} />\n\t\t\t\t\t\t<Route exact path='/entity/:name' component={EntityPage} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</StoreProvider>\n\t\t</BrowserRouter>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}