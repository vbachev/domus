{"version":3,"sources":["dataset.ts","Navigation.tsx","HomePage.tsx","EntitiesPage.tsx","EntityPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Transaction","row","date","account","amount","person","entity","comment","split","map","Number","day","month","year","this","Date","getDate","getMonth","getFullYear","i","toString","padStart","join","Entity","transactions","name","people","Array","from","Set","t","length","lastTransaction","now","Account","reduce","sum","groupTransactionsByKey","key","transactionsByKey","all","keyValue","push","Object","values","defaultDataset","accounts","entities","DatasetContext","React","createContext","loadDataset","a","Promise","resolve","gsapi","GSAPI","clientId","spreadsheet","sheets","user","signIn","getAll","rawTransactions","console","error","shift","sort","b","getTime","Navigation","pathname","useLocation","className","src","process","width","height","alt","label","href","m","to","HomePage","useContext","total","toFixed","EntitiesPage","views","useState","activeView","setActiveView","changeView","e","preventDefault","target","innerText","sortedEntities","getMonthsOverdue","v","onClick","EntityPage","props","match","params","find","getFormattedDate","App","dataset","setDataset","useEffect","then","basename","appName","Provider","value","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a430e31b.chunk.js","sourcesContent":["import React from 'react'\nimport GSAPI from 'google-sheets-api'\n\nclass Transaction {\n\t[key: string]: any\n\tdate: Date\n\taccount: string\n\tamount: number\n\tperson: string\n\tentity: string\n\tcomment: string\n\n\tconstructor(row: string[]) {\n\t\tconst [day, month, year] = row[0].split('.').map(Number);\n\t\tthis.date = new Date(year, month - 1, day) // months are 0-based\n\t\tthis.account = row[3]\n\t\tthis.amount = Number(row[4])\n\t\tthis.person = row[2]\n\t\tthis.entity = row[1]\n\t\tthis.comment = row[5]\n\t}\n\n\tgetFormattedDate(): string {\n\t\treturn [\n\t\t\tthis.date.getDate(),\n\t\t\tthis.date.getMonth() + 1, // months are 0-based\n\t\t\tthis.date.getFullYear()\n\t\t]\n\t\t\t.map(i => i.toString().padStart(2, '0'))\n\t\t\t.join('.');\n\t}\n}\n\nclass Entity {\n\tname: string\n\ttransactions: Transaction[]\n\tpeople: string[]\n\n\tconstructor(transactions: Transaction[]) {\n\t\tthis.name = transactions[0].entity;\n\t\tthis.transactions = transactions;\n\t\tthis.people = Array.from(new Set(transactions.map(t => t.person)));\n\t}\n\n\tgetLastPerson(): string {\n\t\treturn this.transactions[this.transactions.length - 1].person;\n\t}\n\n\tgetMonthsOverdue(): number {\n\t\tconst lastTransaction = this.transactions[this.transactions.length - 1];\n\t\tconst now = new Date();\n\t\tconst yearsAgo = now.getFullYear() - lastTransaction.date.getFullYear();\n\t\tconst monthsAgo = now.getMonth() - lastTransaction.date.getMonth();\n\t\treturn yearsAgo * 12 + monthsAgo;\n\t}\n}\n\nclass Account {\n\tname: string\n\ttransactions: Transaction[]\n\tamount: number\n\n\tconstructor(transactions: Transaction[]) {\n\t\tthis.name = transactions[0].account;\n\t\tthis.transactions = transactions;\n\t\tthis.amount = transactions.reduce((sum, t) => sum + t.amount, 0);\n\t}\n}\n\nconst getTransactions = (): Promise<string[][]> => new Promise(resolve => {\n\tconst gsapi = GSAPI({\n\t\tclientId: '780267795399-048pa12qtdcpdganklc6ggmpbm3epucv.apps.googleusercontent.com',\n\t\tspreadsheet: { name: 'База данни ЕС', sheets: ['Движения'] }\n\t}, () => {\n\t\tgsapi.user.signIn(() => {\n\t\t\tgsapi.getAll('Движения', resolve)\n\t\t})\n\t})\n})\n\nfunction groupTransactionsByKey(transactions: Transaction[], key: string): Transaction[][] {\n\tconst transactionsByKey = transactions.reduce((all: any, t) => {\n\t\tconst keyValue = t[key];\n\t\tall[keyValue] = all[keyValue] || [];\n\t\tall[keyValue].push(t);\n\t\treturn all;\n\t}, {})\n\treturn Object.values(transactionsByKey)\n}\n\nexport const defaultDataset = {\n\ttransactions: [] as Transaction[],\n\taccounts: [] as Account[],\n\tentities: [] as Entity[]\n}\n\nexport const DatasetContext = React.createContext(defaultDataset)\n\nexport const loadDataset = async () => {\n\tconst rawTransactions: string[][] = await getTransactions()\n\tif (!rawTransactions) {\n\t\tconsole.error('Could not fetch any transactions!')\n\t\treturn defaultDataset\n\t}\n\trawTransactions.shift() // skip header row\n\tconst transactions = rawTransactions.map(t => new Transaction(t))\n\t\t.sort((a, b) => a.date.getTime() - b.date.getTime())\n\tconst accounts = groupTransactionsByKey(transactions, 'account')\n\t\t.map(t => new Account(t))\n\tconst entities = groupTransactionsByKey(transactions, 'entity')\n\t\t.map(t => new Entity(t))\n\t\t.sort((a, b) => a.name < b.name ? -1 : a.name > b.name ? 1 : 0)\n\treturn { transactions, accounts, entities }\n}\n","import React from 'react'\nimport { Link, useLocation } from \"react-router-dom\";\n\nexport default function Navigation() {\n\tconst { pathname } = useLocation()\n\tconst menuItems = [\n\t\t{ label: 'Баланси', href: '/' },\n\t\t{ label: 'Обекти', href: '/entities' }\n\t]\n\treturn (\n\t\t<nav className='navbar navbar-expand sticky-top navbar-dark bg-dark'>\n\t\t\t<span className=\"navbar-brand\">\n\t\t\t\t<img src={process.env.PUBLIC_URL + '/apple-touch-icon.png'}\n\t\t\t\t\twidth=\"30\"\n\t\t\t\t\theight=\"30\"\n\t\t\t\t\talt=\"Domus logo\" />\n\t\t\t</span>\n\t\t\t<div className='container'>\n\t\t\t\t<div className='navbar-nav mr-auto'>\n\t\t\t\t\t{menuItems.map(m => (\n\t\t\t\t\t\t<Link key={m.href} to={m.href}\n\t\t\t\t\t\t\tclassName={`nav-item nav-link ${pathname === m.href ? 'active' : ''}`}>\n\t\t\t\t\t\t\t{m.label}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</nav>\n\t)\n}\n","import React from 'react'\nimport { DatasetContext } from './dataset'\n\nexport default function HomePage() {\n\tconst { accounts } = React.useContext(DatasetContext)\n\tconst total = accounts.reduce((total, account) => total + account.amount, 0)\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"mt-n3 mx-n3 mb-3 p-3 bg-secondary text-light\">\n\t\t\t\t<h2>Баланси и сметки</h2>\n\t\t\t</div>\n\n\t\t\t<ul className='list-group'>\n\t\t\t\t<li className='list-group-item list-group-item-secondary d-flex justify-content-between'>\n\t\t\t\t\tОбщ баланс\n\t\t\t\t\t<strong>{total.toFixed(2)}лв</strong>\n\t\t\t\t</li>\n\t\t\t\t{accounts.map(({ name, amount }) => (\n\t\t\t\t\t<li key={name} className='list-group-item d-flex justify-content-between'>\n\t\t\t\t\t\t{name}\n\t\t\t\t\t\t<strong>{amount.toFixed(2)}лв</strong>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n","import React from 'react'\nimport { DatasetContext } from './dataset'\nimport { Link } from 'react-router-dom'\n\nexport default function EntitiesPage() {\n\tconst { entities } = React.useContext(DatasetContext)\n\tconst views = ['Азбучно', 'Длъжници'];\n\tconst [activeView, setActiveView] = React.useState(views[0]);\n\tconst changeView = (e: any) => {\n\t\te.preventDefault();\n\t\tsetActiveView(e.target.innerText);\n\t};\n\n\tconst sortedEntities = activeView === views[0]\n\t\t? entities\n\t\t: [...entities].sort((a, b) => b.getMonthsOverdue() - a.getMonthsOverdue())\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"mt-n3 mx-n3 mb-3 px-3 pt-3 bg-secondary text-light\">\n\t\t\t\t<h2>Обекти</h2>\n\t\t\t\t<ul className='nav nav-tabs border-0'>\n\t\t\t\t\t{views.map(v => (\n\t\t\t\t\t\t<li key={v} className='nav-item'>\n\t\t\t\t\t\t\t<a className={`nav-link ${activeView === v ? 'active' : ''}`}\n\t\t\t\t\t\t\t\tonClick={changeView}>\n\t\t\t\t\t\t\t\t{v}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t<div className='list-group'>\n\t\t\t\t{sortedEntities.map(e => (\n\t\t\t\t\t<Link key={e.name} to={`/entity/${e.name}`} className='list-group-item list-group-item-action'>\n\t\t\t\t\t\t<div className='d-flex justify-content-between align-items-center'>\n\t\t\t\t\t\t\t<h5 className='mb-0'>{e.name}</h5>\n\t\t\t\t\t\t\t<span className='badge badge-warning badge-pill'>\n\t\t\t\t\t\t\t\t{e.getMonthsOverdue()} месеца\n                </span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<small className='text-muted'>\n\t\t\t\t\t\t\t{e.people[e.people.length - 1]}\n\t\t\t\t\t\t</small>\n\n\t\t\t\t\t</Link>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import React from 'react'\nimport { DatasetContext } from './dataset'\n\nexport default function EntityPage(props: any) {\n\tconst { entities } = React.useContext(DatasetContext)\n\tconst { name } = props.match.params;\n\tconst entity = entities.find(e => e.name === name);\n\tconst views = ['Движения', 'Хора'];\n\tconst [activeView, setActiveView] = React.useState(views[0]);\n\tconst changeView = (e: any) => {\n\t\te.preventDefault();\n\t\tsetActiveView(e.target.innerText);\n\t};\n\n\tif (!entity) return <h2>Not found</h2>;\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"mt-n3 mx-n3 mb-3 px-3 pt-3 bg-secondary text-light\">\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<ul className='nav nav-tabs border-0'>\n\t\t\t\t\t{views.map(v => (\n\t\t\t\t\t\t<li key={v} className='nav-item'>\n\t\t\t\t\t\t\t<a className={`nav-link ${activeView === v ? 'active' : ''}`}\n\t\t\t\t\t\t\t\tonClick={changeView}>\n\t\t\t\t\t\t\t\t{v}\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\n\t\t\t{activeView === views[1] && (\n\t\t\t\t<div className='list-group'>\n\t\t\t\t\t{entity.people.map(person => (\n\t\t\t\t\t\t<div key={person} className='list-group-item list-group-item-action'>\n\t\t\t\t\t\t\t{person}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{activeView === views[0] && (\n\t\t\t\t<div className='list-group'>\n\t\t\t\t\t{entity.transactions.map(t => (\n\t\t\t\t\t\t<div key={t.date + t.comment + t.amount}\n\t\t\t\t\t\t\tclassName='list-group-item list-group-item-action'>\n\t\t\t\t\t\t\t<small className='d-flex justify-content-between align-items-center'>\n\t\t\t\t\t\t\t\t<div>{t.getFormattedDate()}</div>\n\t\t\t\t\t\t\t\t<div className='text-muted'>\n\t\t\t\t\t\t\t\t\t{t.person}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t\t<span className='badge badge-secondary mr-2'>\n\t\t\t\t\t\t\t\t{t.amount}лв\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t{t.comment}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\nimport { name as appName } from '../package.json'\nimport { DatasetContext, loadDataset, defaultDataset } from './dataset'\nimport Navigation from './Navigation'\nimport HomePage from './HomePage'\nimport EntitiesPage from './EntitiesPage'\nimport EntityPage from './EntityPage'\n\nexport default function App() {\n\tconst [dataset, setDataset] = React.useState(defaultDataset)\n\tReact.useEffect(() => {\n\t\tloadDataset().then(setDataset)\n\t}, [])\n\n\treturn (\n\t\t<BrowserRouter basename={appName}>\n\t\t\t<DatasetContext.Provider value={dataset}>\n\t\t\t\t<Navigation />\n\t\t\t\t<div className='container py-3'>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path='/' component={HomePage} />\n\t\t\t\t\t\t<Route exact path='/entities' component={EntitiesPage} />\n\t\t\t\t\t\t<Route exact path='/entity/:name' component={EntityPage} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</DatasetContext.Provider>\n\t\t</BrowserRouter>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}